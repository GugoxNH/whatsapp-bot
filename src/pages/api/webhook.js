import { setSesion, getSesion } from "../../lib/sesion.js"; // o "../lib/..." seg√∫n tu estructura


const processedMessages = new Set();
setInterval(() => processedMessages.clear(), 1000 * 60 * 5);

export const config = {
  api: {
    bodyParser: {
      sizeLimit: "1mb",
    },
  },
};

export default async function handler(req, res) {
  const VERIFY_TOKEN = process.env.VERIFY_TOKEN;
  const OPENROUTER_API_KEY = process.env.OPENROUTER_API_KEY;
  const META_ACCESS_TOKEN = process.env.META_ACCESS_TOKEN;
  const PHONE_NUMBER_ID = process.env.PHONE_NUMBER_ID;
  const MODEL_NAME = process.env.MODEL_NAME || "deepseek/deepseek-chat";

  if (req.method === "GET") {
    const mode = req.query["hub.mode"];
    const token = req.query["hub.verify_token"];
    const challenge = req.query["hub.challenge"];


    if (mode === "subscribe" && token === VERIFY_TOKEN) {
      return res.status(200).send(challenge);
    } else {
      return res.status(403).end();
    }
  }

  if (req.method === "POST") {
    const body = req.body;
    const messageObj = body?.entry?.[0]?.changes?.[0]?.value?.messages?.[0];
    const userMessage = messageObj?.text?.body;
    const senderNumber = messageObj?.from;
    const messageId = messageObj?.id;

    const sesion = await getSesion(senderNumber);


    console.log("Numero: ", senderNumber)
    console.log("MessageID: ", messageId)

    if (!userMessage || !senderNumber || !messageId) return res.status(200).end();
    if (processedMessages.has(messageId)) return res.status(200).end();
    processedMessages.add(messageId);

    // 1. Obtener todos los eventos desde la API
    const response = await fetch("https://smarticket.pagaboletos.com/wp-json/whatsapp-api/v1/products");
    const eventos = await response.json();

    // 2. Convertir eventos a texto amigable
    const eventosTexto = eventos.map((e, i) => {
      const zonas = e.variations
        .map(v => `- ${v.attributes["attribute_zonas"]} (${v.regular_price} MXN)`)
        .join("\n");

      return `Evento ${i + 1}:
T√≠tulo: ${e.title}
Link: ${e.link}
Zonas:
${zonas}
`;
    }).join("\n");

    let evento_select = "";
    if (sesion?.eventoIndex !== undefined) {
      const evento_aux = eventos[sesion.eventoIndex];
      const zonas = evento_aux.variations
        .map(v => `- ${v.attributes["attribute_zonas"]} (${v.regular_price} MXN)`)
        .join("\n");

      evento_select = `Este es el evento que selecciono el usuario:
T√≠tulo: ${evento_aux.title}
Link: ${evento_aux.link}
Zonas:
${zonas}
`;
    }

    console.log("evento_select: ", evento_select);


    // 3. Crear contexto completo para IA
    const contexto = `Tu trabajo es ayudar a los usuarios a encontrar eventos disponibles y guiarlos con informaci√≥n √∫til.
Al recibir un saludo, responde con un "hola".

Aqu√≠ est√° la lista completa de eventos disponibles con todos los detalles:

${eventosTexto}

${evento_select}

Reglas:
- Si el mensaje recibido por el usuario no tiene sentido responde "Lo siento, no entend√≠ tu pregunta. ¬øPodr√≠as repetirlo üòä?"
- Solo responde preguntas relacionadas con estos eventos y ofrece hablar con un asesor en caso de una petici√≥n diferente.
- Si el usuario quiere ver la lista, mu√©strasela con los t√≠tulos numerados y el link del evento solamente, has un salto de linea entre cada evento.
- Si el usuario pregunta por un n√∫mero de evento, devu√©lvele el link y los precios.
- Si el usuario escribe algo fuera de tema, p√≠dele que solicite la lista o escriba el n√∫mero del evento.
- No inventes datos, responde siempre con la informaci√≥n proporcionada aqu√≠.
- No asumas la ubicaci√≥n del usuario.0
- Si el usuario pide informaci√≥n muy especifica o algo con el que no puedas ayudarlo, sugiere que pida ayuda a un "asesor" y que le proporcionaras el n√∫mero.
- S√© amable y breve.
`;

    // 4. Llamada a OpenRouter
    const aiResponse = await fetch("https://openrouter.ai/api/v1/chat/completions", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${OPENROUTER_API_KEY}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model: MODEL_NAME,
        messages: [
          { role: "system", content: contexto },
          { role: "user", content: userMessage },
        ],
      }),
    });

    const aiJson = await aiResponse.json();
    let replyText = aiJson.choices?.[0]?.message?.content || "Lo siento, no entend√≠ tu pregunta.";

    const mensajeSaludo = `üëã ¬°Hola! Gracias por contactar a Soporte Boletos.  
                            Estamos aqu√≠ para ayudarte con cualquier duda sobre tu compra, boletos, fechas o disponibilidad.  
                            Por favor ind√≠canos tu n√∫mero de orden o el evento de tu inter√©s.`;

    const contactoPayload = {
      messaging_product: "whatsapp",
      to: senderNumber,
      type: "contacts",
      contacts: [
        {
          name: {
            formatted_name: "Soporte",
            first_name: "Boletos",
            last_name: ""
          },
          org: {
            company: "Soporte Boletos",
            title: "Soporte"
          },
          phones: [
            {
              phone: "+5215639645766", // N√∫mero con lada internacional
              type: "Mobile",
              wa_id: "5215639645766"
            }
          ]
        }
      ]
    };

    const saludoDetectado = /(hola|bienvenido|gracias por escribirnos|gracias por contactar)/i.test(replyText);
    console.log("saludo: ", replyText);

    //Primer mensaje de la la lista
    if (saludoDetectado) {
      const eventosLista = eventos.map(e => `- ${e.title}`).join("\n");
      const lista = `üéüÔ∏è *Eventos disponibles:*\n${eventosLista}`;

      await fetch(`https://graph.facebook.com/v18.0/${PHONE_NUMBER_ID}/messages`, {
        method: "POST",
        headers: {
          Authorization: `Bearer ${META_ACCESS_TOKEN}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          messaging_product: "whatsapp",
          to: senderNumber,
          type: "text",
          text: {
            preview_url: false,
            body: mensajeSaludo,
          },
        }),
      });

      console.log("saludoDetectado: ", saludoDetectado);

      await fetch(`https://graph.facebook.com/v18.0/${PHONE_NUMBER_ID}/messages`, {
        method: "POST",
        headers: {
          Authorization: `Bearer ${META_ACCESS_TOKEN}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          messaging_product: "whatsapp",
          to: senderNumber,
          type: "text",
          text: {
            preview_url: false,
            body: lista,
          },
        }),
      });
      return res.status(200).end();
    }

    let eventoIndexDetectado = -1;
    // Detectar si el mensaje menciona alg√∫n evento por nombre
    const mensajeUsuarioNormalizado = userMessage
      .toLowerCase()
      .normalize("NFD")
      .replace(/[\u0300-\u036f]/g, "")
      .replace(/[^\w\s]/gi, ""); // quitar signos

    eventos.forEach((evento, index) => {
      const tituloNormalizado = evento.title
        .toLowerCase()
        .normalize("NFD")
        .replace(/[\u0300-\u036f]/g, "")
        .replace(/[^\w\s]/gi, "");

      if (
        tituloNormalizado.includes(mensajeUsuarioNormalizado) ||
        mensajeUsuarioNormalizado.includes(tituloNormalizado)
      ) {
        eventoIndexDetectado = index;
      }
    });

    if (eventoIndexDetectado !== -1) {
      console.log(`üéØ Evento detectado: ${eventos[eventoIndexDetectado].title}`);
      setSesion(senderNumber, { eventoIndex: eventoIndexDetectado });
    }


    if (sesion?.eventoIndex !== undefined) {
      const evento = eventos[sesion.eventoIndex];
      console.log("Index del evento seleccionado " + sesion.eventoIndex);
      console.log("Evento: ", evento);
      console.log("‚úÖ Evento desde Redis:", evento.title);

      const mes = `Elegiste el evento ${evento.title} ¬øC√≥mo podemos ayudarte? Elige una opci√≥n:
                  1Ô∏è‚É£ Ver precios y zonas  
                  2Ô∏è‚É£ Consultar fecha del evento  
                  3Ô∏è‚É£ Ver disponibilidad  
                  4Ô∏è‚É£ No recib√≠ mis boletos   
                  5Ô∏è‚É£ Enviar identificaci√≥n   
                  6Ô∏è‚É£ ¬øPor qu√© me piden identificaci√≥n?   
                  7Ô∏è‚É£ Validar pago o correo   
                  8Ô∏è‚É£ Comprar boletos`;
      const opcion = userMessage.trim();
      let mess_opt = "";

      if (/^(4|5|7)$/.test(opcion)) {
        switch (opcion) {
          case "4":
            mess_opt = `Lamentamos el inconveniente :( 
Por favor comp√°rtenos el n√∫mero de orden y el correo con el que realizaste la compra al siguiente contacto para validar el env√≠o.

Mientras tanto, revisa tu bandeja de spam o no deseados. A veces los boletos llegan ah√≠.`;
            break;
          case "5"://cambiar correo
            mess_opt = `Si est√°s teniendo problemas para enviar tu identificaci√≥n, puedes intentar lo siguiente:

1. Aseg√∫rate de que la imagen est√© clara y legible.  
2. Env√≠a la foto directamente al contacto que se te mandar√° a continuaci√≥n.  
3. Tambi√©n puedes mandarla por correo a: soporte@test.com

Recuerda que solicitar la identificaci√≥n es un m√©todo de seguridad para proteger tu compra.  
Esto nos ayuda a verificar que el titular de la tarjeta es quien realiz√≥ la compra.`;
            break;
          case "7":
            mess_opt = `Para validar el pago de tu boleto o validar tu correo, por favor manda mensaje al siguiente contacto:`;
            break;
        }

        await fetch(`https://graph.facebook.com/v18.0/${PHONE_NUMBER_ID}/messages`, {
          method: "POST",
          headers: {
            Authorization: `Bearer ${META_ACCESS_TOKEN}`,
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            messaging_product: "whatsapp",
            to: senderNumber,
            type: "text",
            text: {
              preview_url: false,
              body: mess_opt,
            },
          }),
        });

        await fetch(`https://graph.facebook.com/v18.0/${PHONE_NUMBER_ID}/messages`, {
          method: "POST",
          headers: {
            Authorization: `Bearer ${META_ACCESS_TOKEN}`,
            "Content-Type": "application/json"
          },
          body: JSON.stringify(contactoPayload)
        });

        return res.status(200).end();
      } else if (/^1$/.test(opcion)) {
        mess_opt = `La solicitud de identificaci√≥n es una medida de seguridad para proteger tanto al comprador como al organizador del evento.  
Nos permite verificar que el titular de la tarjeta con la que se hizo el pago es quien realiz√≥ la compra, evitando fraudes o cargos no autorizados.`;
      } else if (/^2$/.test(opcion)) {
        mess_opt = `La solicitud de identificaci√≥n es una medida de seguridad para proteger tanto al comprador como al organizador del evento.  
Nos permite verificar que el titular de la tarjeta con la que se hizo el pago es quien realiz√≥ la compra, evitando fraudes o cargos no autorizados.`;
      } else if (/^3$/.test(opcion)) {
        mess_opt = `La solicitud de identificaci√≥n es una medida de seguridad para proteger tanto al comprador como al organizador del evento.  
Nos permite verificar que el titular de la tarjeta con la que se hizo el pago es quien realiz√≥ la compra, evitando fraudes o cargos no autorizados.`;
      } else if (/^6$/.test(opcion)) {
        mess_opt = `La solicitud de identificaci√≥n es una medida de seguridad para proteger tanto al comprador como al organizador del evento.  
Nos permite verificar que el titular de la tarjeta con la que se hizo el pago es quien realiz√≥ la compra, evitando fraudes o cargos no autorizados.`;
      } else if (/^8$/.test(opcion)) {
        mess_opt = `La solicitud de identificaci√≥n es una medida de seguridad para proteger tanto al comprador como al organizador del evento.  
Nos permite verificar que el titular de la tarjeta con la que se hizo el pago es quien realiz√≥ la compra, evitando fraudes o cargos no autorizados.`;
      } else {
        await fetch(`https://graph.facebook.com/v18.0/${PHONE_NUMBER_ID}/messages`, {
          method: "POST",
          headers: {
            Authorization: `Bearer ${META_ACCESS_TOKEN}`,
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            messaging_product: "whatsapp",
            to: senderNumber,
            type: "text",
            text: {
              preview_url: false,
              body: mes,
            },
          }),
        });
      }
      return res.status(200).end();
    }

    /* 
        await fetch(`https://graph.facebook.com/v18.0/${PHONE_NUMBER_ID}/messages`, {
          method: "POST",
          headers: {
            Authorization: `Bearer ${META_ACCESS_TOKEN}`,
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            messaging_product: "whatsapp",
            to: senderNumber,
            type: "text",
            text: {
              preview_url: false,
              body: replyText,
            },
          }),
        });
    
        return res.status(200).end(); */
  }
  return res.status(405).end();
}
